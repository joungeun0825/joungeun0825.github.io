{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"이번 글에서는 Docker와 Jenkins를 사용해 배포한 과정에 대해서 이야기해보려고 합니다.  Jenkins 없이 배포했다면 어땠을까? 일단 주요 배포과정을 단순하게 아래 3단계로 나누어 생각해 보겠습니다. 먼저 GCP 인스턴스에서 프로젝트 github repository를 clone 하여야 합니다. 다음으로는 프로젝트를 빌드해야 합니다. 프로젝트 빌…","fields":{"slug":"/deploy/"},"frontmatter":{"date":"September 28, 2024","title":"Google Cloud Platform과 Jenkins를 사용한 배포환경 구축기","tags":["CI/CD","docker"]},"rawMarkdownBody":"이번 글에서는 Docker와 Jenkins를 사용해 배포한 과정에 대해서 이야기해보려고 합니다. \r\n\r\n## Jenkins 없이 배포했다면 어땠을까?\r\n일단 주요 배포과정을 단순하게 아래 3단계로 나누어 생각해 보겠습니다.\r\n\r\n먼저 GCP 인스턴스에서 **프로젝트 github repository를 clone** 하여야 합니다.\r\n```bash\r\ngit clone https://github.com/where-wear/where-wear-backend.git\r\n```\r\n다음으로는 **프로젝트를 빌드**해야 합니다. 프로젝트 빌드는 Gradle Wrapper로 할 수 있습니다. Gradle Wrapper를 실행하는 명령어인 gradlew에 실행 권한을 부여하고, 빌드 합니다.\r\n```bash\r\nchmod +x gradlew\r\n./gradlew bootJar --debug\r\n```\r\n그러면 Java 애플리케이션, 라이브러리 및 관련 리소스가 압축된 **JAR파일이 생성**됩니다. 이 JAR파일을 실행하여 **애플리케이션을 실행**시킵니다.\r\n```bash\r\njava -jar wherewear-0.0.1-SNAPSHOT.jar\r\n```\r\n성공적으로 배포가 완료 되었습니다. 하지만, 이후에 프로젝트 코드가 수정되고 메인 브랜치에 병합된다면, 위 과정을 또 반복해야 할겁니다. 이런 **수고스러운 과정을 없애기 위해서 Jenkins를 사용하여 CI(지속적 통합)/CD(지속적 배포) 과정을 자동화** 해보겠습니다.\r\n\r\n## Jenkins를 사용한 CI/CD 자동화\r\n이제 CI/CD 과정을 자동화 해보겠습니다. 먼저 GCP 인스턴스에 **Jenkins를 설치**해야 합니다. Jenkins는 스프링부트 애플리케이션과 격리된 환경에서 실행하기 위해서 GCP 인스턴스에 Jenkins를 직접 설치하지 않고, **Jenkins 도커 컨테이너를 만드는 방법**을 사용하겠습니다.\r\n\r\n### Jenkins 도커 컨테이너 생성하기\r\n도커 컨테이너를 만들기 위해서는 GCP에 Docker를 설치해야합니다. 아래 방법으로 **Docker를 설치**할 수 있습니다.\r\n\r\n**패키지 업데이트**<br>\r\n아래 명령어로 Docker의 GPG 키를 추가하고 Docker 패키지를 설치하는 데 필요한 환경을 설정합니다.\r\n```bash\r\n$ sudo apt-get update\r\n$ sudo apt-get install \\\r\n    ca-certificates \\\r\n    curl \\\r\n    gnupg \\\r\n    lsb-release\r\n```\r\n\r\n**Docker의 공식 GPG 키 추가**<br>\r\n```bash\r\n$ sudo mkdir -p /etc/apt/keyrings\r\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\r\n```\r\n\r\n**Docker 저장소 설정**<br>\r\n```bash\r\n$ echo \\\r\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\r\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\r\n```\r\n\r\n**Docker 엔진 설치**<br>\r\n```bash\r\n$ sudo apt-get update\r\n$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\r\n```\r\n\r\n**Docker 버전 확인**<br>\r\nDocker가 정상적으로 설치되었는지 버전을 확인합니다.\r\n```bash\r\n$ docker --version​\r\n```\r\n\r\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}