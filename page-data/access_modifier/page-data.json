{"componentChunkName":"component---src-templates-post-jsx","path":"/access_modifier/","result":{"data":{"site":{"siteMetadata":{"title":"mythofsummer"}},"markdownRemark":{"id":"4e05f630-35c1-56d5-8b16-94b3dd5538a2","excerpt":"안녕하세요! 이번 글에서는 자바에서 데이터를 안전하게 보호하는 방법에 대해 정리해보려고 합니다. 저는 그동안 별 생각 없이 과  를 사용하기도 했고, 에 대한 말도 많이 들어봤지만 이것들에 대해서 깊이 생각해본 적은 없었는데요. 아마 저와 같으신 분들은 이번 글이 큰 도움이 될 것 같습니다. 접근제어자는 왜 사용해야 할까? ,  이름 그대로 봤을 때 무언…","html":"<p>안녕하세요! 이번 글에서는 자바에서 데이터를 안전하게 보호하는 방법에 대해 정리해보려고 합니다.</p>\n<p>저는 그동안 별 생각 없이 <code class=\"language-text\">public</code>과 <code class=\"language-text\">private</code> <code class=\"language-text\">접근제어자</code>를 사용하기도 했고, <code class=\"language-text\">캡슐화</code>에 대한 말도 많이 들어봤지만 이것들에 대해서 깊이 생각해본 적은 없었는데요. 아마 저와 같으신 분들은 이번 글이 큰 도움이 될 것 같습니다.</p>\n<h2 id=\"접근제어자는-왜-사용해야-할까\" style=\"position:relative;\"><a href=\"#%EC%A0%91%EA%B7%BC%EC%A0%9C%EC%96%B4%EC%9E%90%EB%8A%94-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"접근제어자는 왜 사용해야 할까 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>접근제어자는 왜 사용해야 할까?</h2>\n<p><code class=\"language-text\">private</code>, <code class=\"language-text\">public</code> 이름 그대로 봤을 때 무언가 비공개, 공개한다는 건 알겠는데, 언제 어떻게 왜 사용하는 걸까요?</p>\n<h3 id=\"의도하지-않은대로-객체를-사용하는-사용자\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EB%8F%84%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%80%EB%8C%80%EB%A1%9C-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%82%AC%EC%9A%A9%EC%9E%90\" aria-label=\"의도하지 않은대로 객체를 사용하는 사용자 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>의도하지 않은대로 객체를 사용하는 사용자</h3>\n<p>스피커 객체가 있다고 해봅시다.</p>\n<p>사용자가 스피커 객체를 사용할 때, 우리는 다음과 같이 객체가 작동하길 원합니다.</p>\n<ol>\n<li>생성자로 초기 음량 값을 지정할 수 있다.</li>\n<li>음량을 한번에 10씩 증가할 수 있다.</li>\n<li>음량이 100을 넘게되면 더 이상 음량을 증가하지 않는다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">access</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Speaker</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> volume<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Speaker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> volume<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>volume <span class=\"token operator\">=</span> volume<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">volumeUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>volume <span class=\"token operator\">>=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"음량을 증가할 수 없습니다. 최대 음량입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            volume <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"음량을 10 증가합니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">volumeDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        volume <span class=\"token operator\">-=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"volumeDown 호출\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">showVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"현재 음량:\"</span> <span class=\"token operator\">+</span> volume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 사용자는 우리가 의도한대로 객체를 사용할까요? 이렇게 행동한다면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">access</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpeakerMain</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token class-name\">Speaker</span> speaker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Speaker</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     speaker<span class=\"token punctuation\">.</span><span class=\"token function\">showVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     speaker<span class=\"token punctuation\">.</span><span class=\"token function\">volumeUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     speaker<span class=\"token punctuation\">.</span><span class=\"token function\">showVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     speaker<span class=\"token punctuation\">.</span><span class=\"token function\">volumeUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     speaker<span class=\"token punctuation\">.</span><span class=\"token function\">showVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">//필드에 직접 접근</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"volume 필드 직접 접근 수정\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     speaker<span class=\"token punctuation\">.</span>volume <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n     speaker<span class=\"token punctuation\">.</span><span class=\"token function\">showVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>실행 결과</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">현재 음량: 90\n음량을 10 증가합니다.\n현재 음량: 100\n음량을 증가할 수 없습니다. 최대 음량입니다.\n현재 음량: 100\nvolume 필드 직접 접근 수정\n현재 음량: 200</code></pre></div>\n<p>우리는 음량이 100을 넘게되면 더 이상 음량을 증가하지 않길 원했지만, 사용자는 <code class=\"language-text\">volume 필드</code>에 직접 접근해 음량을 200이 되도록 설정해버렸습니다.</p>\n<h3 id=\"데이터-보호하기\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%B4%ED%98%B8%ED%95%98%EA%B8%B0\" aria-label=\"데이터 보호하기 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>데이터 보호하기</h3>\n<p>이런 문제를 근본적으로 해결하기 위해서는 외부에서 데이터에 접근하지 못하도록 보호해야 합니다.\n이럴 때 바로 <strong>private 접근제어자</strong>를 사용할 수 있는데요.</p>\n<p><code class=\"language-text\">volume</code> 필드를 <code class=\"language-text\">private</code> 을 사용해서 <code class=\"language-text\">Speaker</code> 내부에 숨겨봅시다!</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">access</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Speaker</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> volume<span class=\"token punctuation\">;</span> <span class=\"token comment\">//private 사용</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>실행 결과</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//필드에 직접 접근</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"volume 필드 직접 접근 수정\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nspeaker<span class=\"token punctuation\">.</span>volume <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//private 접근 오류</span></code></pre></div>\n<p>이제 사용자가 volume 필드에 접근하려고 할 때, 자바 컴파일러가 컴파일 오류를 나게 하여 직접 접근할 수 없게 되었습니다.</p>\n<h2 id=\"캡슐화\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94\" aria-label=\"캡슐화 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>캡슐화</h2>\n<p>이렇게 위에서 보았듯이, 접근제어자를 적절하게 사용하지 않으면 데이터를 보호할 수 없게 되는데요.</p>\n<p>여기서 더 나아가서, <code class=\"language-text\">캡슐화</code>를 생각해볼 수 있습니다. <code class=\"language-text\">캡슐화</code>는 객체 지향 프로그래밍의 중요한 개념 중 하나인데요. 데이터와 해당 데이터를 처리하는 메서드를 하나로 묶어서 외부에서의 접근을 제한하는 것을 말합니다. 이를 통해 데이터의 직접적인 변경을 방지하거나 제한할 수도 있습니다. 쉽게 이야기해서 속성과 기능을 하나로 묶고, 외부에 꼭 필요한 기능만 노출하고 나머지는 모두 내부로 숨기게 되는 것입니다.</p>\n<p>그렇다면 어떤 것을 숨기고 어떤 것을 노출해야 할까요?</p>\n<h3 id=\"데이터를-숨겨라\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%88%A8%EA%B2%A8%EB%9D%BC\" aria-label=\"데이터를 숨겨라 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>데이터를 숨겨라</h3>\n<p>아까 보았듯이, 객체 밖에서 객체 내부의 데이터를 함부로 접근하게 두면, 클래스 안에서 데이터를 다루는 모든 로직을 무시하고 데이터를 변경할 수 있습니다. 결국 모든 안전망을 다 빠져나가게 됩니다. 이것이 바로 <strong><code class=\"language-text\">캡슐화</code>가 깨지게 되는 것입니다.</strong></p>\n<p>예를 들어, 우리가 자동차를 운전할 때 자동차 부품을 다 열어서 그 안에 있는 속도계를 직접 조절하지 않습니다. 단지 자동차 제공하는 엑셀 기능을 사용해서 액셀을 밟으면, 나머지는 자동차가 다 알아서 합니다.</p>\n<p>따라서 <code class=\"language-text\">캡슐화</code>가 깨지지 않게 하려면, 데이터는 다 <code class=\"language-text\">private</code>으로 막고 객체가 제공하는 기능인 메서드를 통해서 접근해야 한다.</p>\n<h3 id=\"기능을-숨겨라\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%8A%A5%EC%9D%84-%EC%88%A8%EA%B2%A8%EB%9D%BC\" aria-label=\"기능을 숨겨라 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>기능을 숨겨라</h3>\n<p>자동차를 운전하기 위해 자동차가 제공하는 복잡한 엔진 조절 기능, 배기 기능까지 우리가 알 필요는 없습니다. 우리는 단지 엑셀과 핸들 정도의 기능만 알면 됩니다.\n사용자에게 이런 기능까지 모두 알려준다면, 사용자가 자동차에 대해 너무 많은 것을 알아야 하는 것입니다.</p>\n<p>따라서, 사용자 입장에서 꼭 필요한 기능만 외부에 노출하는 것이 좋습니다. 나머지 기능은 모두 내부로 숨기도록 합시다.</p>\n<p>우리는 다른 개발자와 같은 코드로 개발해야할 때가 많습니다. 개발자는 열려 있는 <code class=\"language-text\">메소드</code>와 <code class=\"language-text\">필드</code>는 사용해도 된다고 이해할 수도 있고, 혹은 그걸 사용해야 된다고 이해할 수도 있습니다.</p>\n<p>그래서 결국 <code class=\"language-text\">접근 제어자</code>와 <code class=\"language-text\">캡슐화</code>를 통해 데이터를 안전하게 보호하는 것은 물론이고, 특정 <code class=\"language-text\">클래스</code>를 사용하는 개발자 입장에서 기능을 사용하는 복잡도도 낮출 수 있습니다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>마치며</h2>\n<p>그동안 <code class=\"language-text\">접근 제어자</code>와 <code class=\"language-text\">캡슐화</code>에 대해 궁금하셨던 분들에게 이 글이 도움이 되었으면 좋겠습니다. 읽어주셔서 감사드리고, 잘못된 부분이 있으면 댓글 남겨주세요.</p>\n<p>reference : <a href=\"https://www.inflearn.com/course/%EA%B9%80%EC%98%81%ED%95%9C%EC%9D%98-%EC%8B%A4%EC%A0%84-%EC%9E%90%EB%B0%94-%EA%B8%B0%EB%B3%B8%ED%8E%B8/dashboard\">https://www.inflearn.com/course/%EA%B9%80%EC%98%81%ED%95%9C%EC%9D%98-%EC%8B%A4%EC%A0%84-%EC%9E%90%EB%B0%94-%EA%B8%B0%EB%B3%B8%ED%8E%B8/dashboard</a></p>","frontmatter":{"title":"자바에서 데이터를 안전하게 보호하는 방법 - 접근제어자, 캡슐화","date":"October 19, 2024","update":"October 19, 2024","tags":["접근제어자","캡슐화","JAVA"],"series":null},"fields":{"slug":"/access_modifier/","readingTime":{"minutes":8.01}}},"seriesList":{"edges":[{"node":{"id":"926b5e59-e6c2-5645-8db2-7def69c806e4","fields":{"slug":"/jpa1/"},"frontmatter":{"title":"JPA에서 객체 변경 시 save() 호출이 필요할까? - 영속성 컨텍스트의 힘"}}},{"node":{"id":"4ec18b4d-4557-5619-93f7-1daeed19fe69","fields":{"slug":"/jpa2/"},"frontmatter":{"title":"JAVA에서의 static 변수: 이전 값이 남아있는 이유와 적절한 사용법"}}},{"node":{"id":"4e05f630-35c1-56d5-8b16-94b3dd5538a2","fields":{"slug":"/access_modifier/"},"frontmatter":{"title":"자바에서 데이터를 안전하게 보호하는 방법 - 접근제어자, 캡슐화"}}},{"node":{"id":"74d7f977-0c43-5125-9015-fd329e897958","fields":{"slug":"/about/"},"frontmatter":{"title":"안녕하세요 자바 백엔드 개발자 박정은의 블로그입니다. ✋"}}}]},"previous":{"fields":{"slug":"/jpa2/"},"frontmatter":{"title":"JAVA에서의 static 변수: 이전 값이 남아있는 이유와 적절한 사용법"}},"next":null},"pageContext":{"id":"4e05f630-35c1-56d5-8b16-94b3dd5538a2","series":null,"previousPostId":"4ec18b4d-4557-5619-93f7-1daeed19fe69","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}