{"componentChunkName":"component---src-pages-series-jsx","path":"/series/","result":{"data":{"site":{"siteMetadata":{"title":"mythofsummer"}},"allMarkdownRemark":{"group":[{"fieldValue":"CI/CD","totalCount":2},{"fieldValue":"JAVA","totalCount":2},{"fieldValue":"JPA","totalCount":1},{"fieldValue":"Jenkins","totalCount":2},{"fieldValue":"Persistence context","totalCount":1},{"fieldValue":"django","totalCount":1},{"fieldValue":"docker","totalCount":1},{"fieldValue":"opencv","totalCount":1},{"fieldValue":"static","totalCount":1},{"fieldValue":"접근제어자","totalCount":1},{"fieldValue":"캡슐화","totalCount":1}],"nodes":[{"excerpt":"안녕하세요! 이번 글에서는 자바에서 데이터를 안전하게 보호하는 방법에 대해 정리해보려고 합니다. 저는 그동안 별 생각 없이 과  를 사용하기도 했고, 에 대한 말도 많이 들어봤지만 이것들에 대해서 깊이 생각해본 적은 없었는데요. 아마 저와 같으신 분들은 이번 글이 큰 도움이 될 것 같습니다. 접근제어자는 왜 사용해야 할까? ,  이름 그대로 봤을 때 무언…","fields":{"slug":"/access_modifier/"},"frontmatter":{"date":"October 19, 2024","update":"Oct 19, 2024","title":"자바에서 데이터를 안전하게 보호하는 방법 - 접근제어자, 캡슐화","tags":["접근제어자","캡슐화","JAVA"],"series":null}},{"excerpt":"이번에 static을 사용해 프로그램을 개발한 후 테스트를 진행했는데, 예상치 못한 결과가 나왔습니다. 이유를 살펴보니 이전에 사용한 데이터가 그대로 남아있었기 때문이었습니다. 이번 글에서는 static 변수의 동작 원리와 이러한 문제가 발생하는 이유, 그리고 적절하게 사용하는 방법에 대해 다루어 볼게요. static 변수란?  변수는 클래스에 속하는 변…","fields":{"slug":"/static/"},"frontmatter":{"date":"October 18, 2024","update":"Oct 18, 2024","title":"JAVA에서의 static 변수: 이전 값이 남아있는 이유와 적절한 사용법","tags":["static","JAVA"],"series":null}},{"excerpt":"JPA를 사용해 객체 간 관계를 설정하는 부분을 구현하다가 객체 변경 시 save() 메서드를 호출해야 하는지에 대한 의문이 들었습니다. 결론부터 말하자면 호출하지 않아도 됩니다. 이게 다 영속성 컨텍스트의 변경 감지(dirty checking) 특성 덕분입니다. 이번 글에서는 이러한 영속성 컨텍스트의 장점들을 알아보겠습니다. 영속성 컨텍스트란? 영속성 …","fields":{"slug":"/jpa1/"},"frontmatter":{"date":"October 04, 2024","update":"Oct 04, 2024","title":"JPA에서 객체 변경 시 save() 호출이 필요할까? - 영속성 컨텍스트의 힘","tags":["JPA","Persistence context"],"series":null}},{"excerpt":"이 글은 구름톤 유니브에서 들은 강의를 정리한 내용입니다. 이미지를 업로드하고, opencv를 사용하여 이미지에서 얼굴을 탐지하는 웹 서비스를 만들어보겠습니다. 이미지 DB에 저장하기 이미지 업로드 기능을 처리할 수 있는 모델을 정의한 코드입니다. 이 모델은 사용자가 업로드한 이미지 파일과 그에 대한 메타데이터(설명, 업로드된 시간)를 관리합니다. Dja…","fields":{"slug":"/groomthon_study/"},"frontmatter":{"date":"October 03, 2024","update":"Oct 03, 2024","title":"예측모델 기반 face detection 웹서비스 구현","tags":["opencv","django"],"series":"goormthon univ study"}},{"excerpt":"지난 글에서는 Google Cloud Platform 인스턴스에 Jenkins 컨테이너를 실행시켰습니다. 이번 글에서는 Jenkins를 세팅하고, 파이프라인을 구성하여 본격적으로 프로젝트를 배포하고 CI/CD를 자동화해보겠습니다. Jenkins 세팅 Jenkins 방화벽 규칙 설정 Jenkins는 기본적으로 8080 포트를 사용하여 웹 인터페이스를 제공합…","fields":{"slug":"/deploy2/"},"frontmatter":{"date":"October 01, 2024","update":"Oct 01, 2021","title":"Jenkins 사용해 CI/CD 파이프라인 자동화하기","tags":["CI/CD","Jenkins"],"series":"WhereWear 프로젝트 CI/CD"}},{"excerpt":"이번 글에서는 Docker와 Jenkins를 사용해 배포한 과정에 대해서 이야기해보려고 합니다.  Jenkins 없이 배포했다면 어땠을까? 일단 주요 배포과정을 단순하게 아래 3단계로 나누어 생각해 보겠습니다. 먼저 GCP 인스턴스에서 프로젝트 github repository를 clone 하여야 합니다. 다음으로는 프로젝트를 빌드해야 합니다. 프로젝트 빌…","fields":{"slug":"/deploy/"},"frontmatter":{"date":"September 28, 2024","update":"Sep 28, 2021","title":"Google Cloud Platform에서 Jenkins 도커 컨테이너 실행하기","tags":["CI/CD","docker","Jenkins"],"series":"WhereWear 프로젝트 CI/CD"}}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}