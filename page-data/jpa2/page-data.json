{"componentChunkName":"component---src-templates-post-jsx","path":"/jpa2/","result":{"data":{"site":{"siteMetadata":{"title":"mythofsummer"}},"markdownRemark":{"id":"4ec18b4d-4557-5619-93f7-1daeed19fe69","excerpt":"이번에 static을 사용해 프로그램을 개발한 후 테스트를 진행했는데, 예상치 못한 결과가 나왔습니다. 이유를 살펴보니 이전에 사용한 데이터가 그대로 남아있었기 때문이었습니다. 이번 글에서는 static 변수의 동작 원리와 이러한 문제가 발생하는 이유, 그리고 적절하게 사용하는 방법에 대해 다루어 볼게요. static 변수란?  변수는 클래스에 속하는 변…","html":"<p>이번에 static을 사용해 프로그램을 개발한 후 테스트를 진행했는데, 예상치 못한 결과가 나왔습니다. 이유를 살펴보니 이전에 사용한 데이터가 그대로 남아있었기 때문이었습니다.</p>\n<p>이번 글에서는 static 변수의 동작 원리와 이러한 문제가 발생하는 이유, 그리고 적절하게 사용하는 방법에 대해 다루어 볼게요.</p>\n<h2 id=\"static-변수란\" style=\"position:relative;\"><a href=\"#static-%EB%B3%80%EC%88%98%EB%9E%80\" aria-label=\"static 변수란 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>static 변수란?</h2>\n<p><code class=\"language-text\">static</code> 변수는 클래스에 속하는 변수로, 인스턴스마다 별도로 존재하는 것이 아니라 클래스 자체에 종속된 변수입니다. 즉, 하나의 클래스로부터 생성된 모든 객체가 동일한 <code class=\"language-text\">static</code> 변수를 공유하게 되는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 Counter 클래스의 count 변수는 static으로 선언되었기 때문에, 이 클래스로 생성된 모든 인스턴스는 같은 count 변수를 참조하게 됩니다. 여러 객체가 같은 값을 공유해야 할 때 static 변수를 사용하면 유용할 수 있습니다.</p>\n<h2 id=\"이전에-사용한-값이-남아있는-이유\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%84%EC%97%90-%EC%82%AC%EC%9A%A9%ED%95%9C-%EA%B0%92%EC%9D%B4-%EB%82%A8%EC%95%84%EC%9E%88%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"이전에 사용한 값이 남아있는 이유 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>이전에 사용한 값이 남아있는 이유</h2>\n<p><code class=\"language-text\">static</code> 변수가 공유된다는 특성 때문에, 이전에 저장된 값이 남아있는 경우가 발생할 수 있습니다. 이는 <code class=\"language-text\">static</code> 변수의 수명이 클래스의 수명과 동일하기 때문입니다. 프로그램이 종료되거나 클래스가 언로드되지 않는 한, <code class=\"language-text\">static</code> 변수는 계속 메모리에 남아 이전 값을 유지합니다.</p>\n<p>예를 들어, 아래 코드를 보면:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        value <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Example</span> example1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        example1<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">Example</span> example2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>example2<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10 출력</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>example1에서 value 값을 10으로 설정했지만, example2 역시 같은 value를 공유하기 때문에 example2.value 또한 10을 출력합니다. 이처럼 클래스가 공유하는 변수이므로, 객체 간에 값이 남아있는 문제가 발생하는 것입니다.</p>\n<h2 id=\"static-변수를-적절하게-사용하는-방법\" style=\"position:relative;\"><a href=\"#static-%EB%B3%80%EC%88%98%EB%A5%BC-%EC%A0%81%EC%A0%88%ED%95%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"static 변수를 적절하게 사용하는 방법 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>static 변수를 적절하게 사용하는 방법</h2>\n<p>이러한 특성을 이해하고 나면, static 변수를 언제, 어떻게 사용하는 것이 적절한지 고민해봐야 합니다. 몇 가지 추천 방법을 소개해보겠습니다.</p>\n<h3 id=\"객체-간-데이터를-공유해야-할-때만-사용하자\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EA%B0%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EA%B3%B5%EC%9C%A0%ED%95%B4%EC%95%BC-%ED%95%A0-%EB%95%8C%EB%A7%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EC%9E%90\" aria-label=\"객체 간 데이터를 공유해야 할 때만 사용하자 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>객체 간 데이터를 공유해야 할 때만 사용하자</h3>\n<p><code class=\"language-text\">static</code> 변수는 클래스 레벨에서 값을 공유해야 할 때 유용합니다. 예를 들어, 전체 프로그램에서 공통으로 사용하는 설정 값이나 객체가 몇 번 생성되었는지 추적할 때 적합합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> appName <span class=\"token operator\">=</span> <span class=\"token string\">\"MyApp\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"상수-값으로-활용하자\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%88%98-%EA%B0%92%EC%9C%BC%EB%A1%9C-%ED%99%9C%EC%9A%A9%ED%95%98%EC%9E%90\" aria-label=\"상수 값으로 활용하자 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>상수 값으로 활용하자</h3>\n<p>변경되지 않는 값, 즉 상수를 정의할 때 static과 final을 함께 사용하여 클래스 전체에서 공유할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MathConstants</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14159</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 경우, 상수는 프로그램 어디서나 사용할 수 있지만, 값이 변경되지 않기 때문에 안전합니다.</p>\n<h3 id=\"상태를-저장하지-않는-경우에만-사용하자\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%83%9C%EB%A5%BC-%EC%A0%80%EC%9E%A5%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B2%BD%EC%9A%B0%EC%97%90%EB%A7%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EC%9E%90\" aria-label=\"상태를 저장하지 않는 경우에만 사용하자 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>상태를 저장하지 않는 경우에만 사용하자</h3>\n<p>static 변수에 프로그램의 상태나 데이터를 저장하는 것은 피하는 것이 좋습니다. 앞서 본 것처럼, 모든 인스턴스가 같은 데이터를 공유하게 되어, 예상치 못한 문제가 발생할 수 있습니다. 대신, 상태가 개별적이어야 하는 경우에는 인스턴스 변수를 사용해야 합니다.</p>\n<h3 id=\"메모리-관리\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC\" aria-label=\"메모리 관리 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>메모리 관리</h3>\n<p>static 변수는 클래스가 메모리에서 언로드될 때까지 메모리에 남아 있기 때문에 메모리 사용량에 주의해야 합니다. 대규모 데이터를 static으로 저장하면 메모리 누수가 발생할 가능성이 있습니다.</p>\n<h2 id=\"static을-잘못-사용했을-때의-문제점\" style=\"position:relative;\"><a href=\"#static%EC%9D%84-%EC%9E%98%EB%AA%BB-%EC%82%AC%EC%9A%A9%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"static을 잘못 사용했을 때의 문제점 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>static을 잘못 사용했을 때의 문제점</h2>\n<p><strong>의도치 않은 데이터 공유:</strong> 모든 객체가 같은 데이터를 참조하기 때문에, 한 객체에서 값을 수정하면 다른 객체에도 영향을 미칩니다.</p>\n<p><strong>메모리 누수:</strong> static 변수는 클래스가 로드되는 동안 메모리에 유지되므로, 불필요하게 많은 데이터를 static으로 선언하면 메모리 누수가 발생할 수 있습니다.</p>\n<p><strong>테스트 어려움:</strong> static 변수는 상태를 공유하기 때문에, 테스트 중에 상태가 공유되어 테스트가 독립적으로 수행되지 않을 수 있습니다.</p>\n<h2 id=\"적절한-대안\" style=\"position:relative;\"><a href=\"#%EC%A0%81%EC%A0%88%ED%95%9C-%EB%8C%80%EC%95%88\" aria-label=\"적절한 대안 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>적절한 대안</h2>\n<p>만약 static 변수를 통해 데이터를 공유하는 것이 아니라 독립적인 객체마다 상태를 관리하고 싶다면, 인스턴스 변수를 사용하는 것이 더 적합합니다. 예를 들어, 다음과 같이 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Example</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 하면 객체마다 고유한 value를 가지게 되므로, 객체 간에 상태가 공유되지 않습니다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>마치며</h2>\n<p>static 변수는 적절하게 사용하면 매우 유용하지만, 잘못 사용하면 이전 값이 남아있거나 데이터가 공유되는 예기치 못한 문제를 일으킬 수 있습니다. 이를 방지하기 위해, static 변수를 사용할 때는 해당 값이 모든 객체에서 동일하게 공유될 필요가 있는지 신중하게 검토해야 합니다. 또한, 객체별로 상태를 따로 관리해야 하는 경우에는 static 변수를 사용하지 않는 것이 좋습니다.</p>\n<p>static 변수는 매우 강력한 도구이지만, 그만큼 주의 깊은 사용이 필요합니다. 이를 올바르게 사용함으로써 코드의 안정성과 유지보수성을 높일 수 있습니다.</p>\n<p>읽어주셔서 감사드리고, 잘못된 부분이 있으면 댓글 남겨주세요.</p>\n<p>reference : <a href=\"https://www.inflearn.com/course/%EA%B9%80%EC%98%81%ED%95%9C%EC%9D%98-%EC%8B%A4%EC%A0%84-%EC%9E%90%EB%B0%94-%EA%B8%B0%EB%B3%B8%ED%8E%B8/dashboard\">https://www.inflearn.com/course/%EA%B9%80%EC%98%81%ED%95%9C%EC%9D%98-%EC%8B%A4%EC%A0%84-%EC%9E%90%EB%B0%94-%EA%B8%B0%EB%B3%B8%ED%8E%B8/dashboard</a></p>","frontmatter":{"title":"JAVA에서의 static 변수: 이전 값이 남아있는 이유와 적절한 사용법","date":"October 18, 2024","update":"October 18, 2024","tags":["static","JAVA"],"series":null},"fields":{"slug":"/jpa2/","readingTime":{"minutes":7.945}}},"seriesList":{"edges":[{"node":{"id":"926b5e59-e6c2-5645-8db2-7def69c806e4","fields":{"slug":"/jpa1/"},"frontmatter":{"title":"JPA에서 객체 변경 시 save() 호출이 필요할까? - 영속성 컨텍스트의 힘"}}},{"node":{"id":"4ec18b4d-4557-5619-93f7-1daeed19fe69","fields":{"slug":"/jpa2/"},"frontmatter":{"title":"JAVA에서의 static 변수: 이전 값이 남아있는 이유와 적절한 사용법"}}},{"node":{"id":"4e05f630-35c1-56d5-8b16-94b3dd5538a2","fields":{"slug":"/access_modifier/"},"frontmatter":{"title":"자바에서 데이터를 안전하게 보호하는 방법 - 접근제어자, 캡슐화"}}},{"node":{"id":"74d7f977-0c43-5125-9015-fd329e897958","fields":{"slug":"/about/"},"frontmatter":{"title":"안녕하세요 자바 백엔드 개발자 박정은의 블로그입니다. ✋"}}}]},"previous":{"fields":{"slug":"/jpa1/"},"frontmatter":{"title":"JPA에서 객체 변경 시 save() 호출이 필요할까? - 영속성 컨텍스트의 힘"}},"next":{"fields":{"slug":"/access_modifier/"},"frontmatter":{"title":"자바에서 데이터를 안전하게 보호하는 방법 - 접근제어자, 캡슐화"}}},"pageContext":{"id":"4ec18b4d-4557-5619-93f7-1daeed19fe69","series":null,"previousPostId":"926b5e59-e6c2-5645-8db2-7def69c806e4","nextPostId":"4e05f630-35c1-56d5-8b16-94b3dd5538a2"}},"staticQueryHashes":[],"slicesMap":{}}